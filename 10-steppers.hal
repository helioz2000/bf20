# #######################################
#
# HAL file for HostMot2 with 3 steppers
#
# Derived from Ted Hyde's original hm2-servo config
#
# Based up work and discussion with Seb & Peter & Jeff
# GNU license references - insert here. www.linuxcnc.org
#
#
# ########################################
# Firmware files are in /lib/firmware/hm2/7i43/
# Must symlink the hostmot2 firmware directory of sanbox to
# /lib/firmware before running EMC2...
# sudo ln -s $HOME/emc2-sandbox/src/hal/drivers/mesa-hostmot2/firmware /lib/firmware/hm2
#
# See also:
# <http://www.linuxcnc.org/docs/devel/html/man/man9/hostmot2.9.html#config%20modparam>
# and http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?HostMot2
#
# #####################################################################


# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt [KINS]KINEMATICS

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
# Note: Mesa cards do not use a base thread
# base_period_nsec=[EMCMOT]BASE_PERIOD

# hostmot2 driver
loadrt hostmot2

# load low-level driver
loadrt [HOSTMOT2](DRIVER) config=[HOSTMOT2](CONFIG)

# PID controller
loadrt pid names=pid.x,pid.y,pid.z

# ################################################
# THREADS
# ################################################

addf hm2_[HOSTMOT2](BOARD).0.read         servo-thread
addf hm2_[HOSTMOT2](BOARD).0.write        servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
addf pid.x.do-pid-calcs                   servo-thread
addf pid.y.do-pid-calcs                   servo-thread
addf pid.z.do-pid-calcs                   servo-thread

# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# X [0] Axis
# ################

# PID setup
setp pid.x.Pgain     [JOINT_0]P
setp pid.x.Igain     [JOINT_0]I
setp pid.x.Dgain     [JOINT_0]D
setp pid.x.bias      [JOINT_0]BIAS
setp pid.x.FF0       [JOINT_0]FF0
setp pid.x.FF1       [JOINT_0]FF1
setp pid.x.FF2       [JOINT_0]FF2
setp pid.x.FF3       [JOINT_0]FF3
setp pid.x.deadband  [JOINT_0]DEADBAND
setp pid.x.maxoutput [JOINT_0]MAX_OUTPUT

# axis enable chain
#newsig emcmot.00.enable bit
#sets emcmot.00.enable FALSE
net emcmot.00.enable <= joint.0.amp-enable-out 
net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.00.enable


# Config without encoder
# position command to stepgen
#net emcmot.00.pos-cmd <= joint.0.motor-pos-cmd
#net emcmot.00.pos-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-cmd
# position feedback from stepgen
#net motor.00.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-fb
#net motor.00.pos-fb => joint.0.motor-pos-fb
# position control mode
#setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.control-type    0


# Config with encoder+pid
# pid controller enable 
net emcmot.00.enable => pid.x.enable
# index enable for homing
net x_index_enable <= joint.0.index-enable
net x_index_enable => pid.x.index-enable
net x_index_enable => hm2_[HOSTMOT2](BOARD).0.encoder.00.index-enable
# pid output to drive stepgen
net x_pid_output <= pid.x.output => hm2_[HOSTMOT2](BOARD).0.stepgen.00.velocity-cmd
# pid velocity feedback
net x_velocity_feedback <= hm2_[HOSTMOT2](BOARD).0.encoder.00.velocity
net x_velocity_feedback => pid.x.feedback-deriv
# position command to pid
net x_pos_command <= joint.0.motor-pos-cmd => pid.x.command
# positon feedback from encoder
net x_pos_feedback <= hm2_[HOSTMOT2](BOARD).0.encoder.00.position
net x_pos_feedback => pid.x.feedback
net x_pos_feedback => joint.0.motor-pos-fb
# velocity control mode
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.control-type    1


# stepgen setup
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.dirsetup        [JOINT_0]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.dirhold         [JOINT_0]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.steplen         [JOINT_0]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.stepspace       [JOINT_0]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-scale  [JOINT_0]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.maxvel          [JOINT_0]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.maxaccel        [JOINT_0]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.step_type       0

# Encoder
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.filter       1
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.scale        [JOINT_0]ENCODER_SCALE

# ################
# Y [1] Axis
# ################

# PID setup
setp pid.y.Pgain     [JOINT_1]P
setp pid.y.Igain     [JOINT_1]I
setp pid.y.Dgain     [JOINT_1]D
setp pid.y.bias      [JOINT_1]BIAS
setp pid.y.FF0       [JOINT_1]FF0
setp pid.y.FF1       [JOINT_1]FF1
setp pid.y.FF2       [JOINT_1]FF2
setp pid.y.FF3       [JOINT_1]FF3
setp pid.y.deadband  [JOINT_1]DEADBAND
setp pid.y.maxoutput [JOINT_1]MAX_OUTPUT

# axis enable chain
net emcmot.01.enable <= joint.1.amp-enable-out 
net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.01.enable

# Config without encoder
# position command joint->stepgen
#net emcmot.01.pos-cmd <= joint.1.motor-pos-cmd
#net emcmot.01.pos-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-cmd
# position feedback stepgen->joint
#net motor.01.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-fb
#net motor.01.pos-fb => joint.1.motor-pos-fb
# stepgen control mode "position"
#setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.control-type    0

# Config with encoder+pid
# pid controller enable
net emcmot.01.enable => pid.y.enable
# index enable for homing
net y_index_enable <= joint.1.index-enable
net y_index_enable => pid.y.index-enable
net y_index_enable => hm2_[HOSTMOT2](BOARD).0.encoder.01.index-enable
# pid output to drive stepgen
net y_pid_output <= pid.y.output => hm2_[HOSTMOT2](BOARD).0.stepgen.01.velocity-cmd
# pid velocity feedback
net y_velocity_feedback <= hm2_[HOSTMOT2](BOARD).0.encoder.01.velocity
net y_velocity_feedback => pid.y.feedback-deriv
# position command to pid
net y_pos_command <= joint.1.motor-pos-cmd => pid.y.command
# positon feedback from encoder
net y_pos_feedback <= hm2_[HOSTMOT2](BOARD).0.encoder.01.position
net y_pos_feedback => pid.y.feedback
net y_pos_feedback => joint.1.motor-pos-fb
# stepgen control mode "velocity"
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.control-type    1

# stepgen setup
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.dirsetup        [JOINT_1]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.dirhold         [JOINT_1]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.steplen         [JOINT_1]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.stepspace       [JOINT_1]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-scale  [JOINT_1]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.maxvel          [JOINT_1]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.maxaccel        [JOINT_1]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.step_type       0

# Encoder
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.filter       1
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.scale        [JOINT_1]ENCODER_SCALE

# ################
# Z [2] Axis
# ################

# axis enable chain
net emcmot.02.enable <= joint.2.amp-enable-out 
net emcmot.02.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.02.enable

# Config without encoder
# stepgen control mode "position"
#setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.control-type    0
# position command joint->stepgen
#net emcmot.02.pos-cmd <= joint.2.motor-pos-cmd
#net emcmot.02.pos-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-cmd
# position feedback stepgen->joint
#net motor.02.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-fb
#net motor.02.pos-fb => joint.2.motor-pos-fb

# Config with encoder+pid
# stepgen control mode "velocity"
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.control-type    1
# pid controller enable
net emcmot.02.enable => pid.z.enable
# index enable for homing
net z_index_enable <= joint.2.index-enable
net z_index_enable => pid.z.index-enable
net z_index_enable => hm2_[HOSTMOT2](BOARD).0.encoder.02.index-enable
# pid output to drive stepgen
net z_pid_output <= pid.z.output => hm2_[HOSTMOT2](BOARD).0.stepgen.02.velocity-cmd
# pid velocity feedback
net z_velocity_feedback <= hm2_[HOSTMOT2](BOARD).0.encoder.02.velocity
net z_velocity_feedback => pid.z.feedback-deriv
# position command to pid
net z_pos_command <= joint.2.motor-pos-cmd => pid.z.command
# positon feedback from encoder
net z_pos_feedback <= hm2_[HOSTMOT2](BOARD).0.encoder.02.position
net z_pos_feedback => pid.z.feedback
net z_pos_feedback => joint.2.motor-pos-fb

# stepgen setup
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.dirsetup        [JOINT_2]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.dirhold         [JOINT_2]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.steplen         [JOINT_2]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.stepspace       [JOINT_2]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-scale  [JOINT_2]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.maxvel          [JOINT_2]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.maxaccel        [JOINT_2]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.step_type       0
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.direction.invert_output   1

# Encoder setup
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.counter-mode    0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.filter      1
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.scale           [JOINT_2]ENCODER_SCALE

# PID setup
setp pid.z.Pgain     [JOINT_2]P
setp pid.z.Igain     [JOINT_2]I
setp pid.z.Dgain     [JOINT_2]D
setp pid.z.bias      [JOINT_2]BIAS
setp pid.z.FF0       [JOINT_2]FF0
setp pid.z.FF1       [JOINT_2]FF1
setp pid.z.FF2       [JOINT_2]FF2
setp pid.z.FF3       [JOINT_2]FF3
setp pid.z.deadband  [JOINT_2]DEADBAND
setp pid.z.maxoutput [JOINT_2]MAX_OUTPUT
